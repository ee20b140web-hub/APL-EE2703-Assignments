import numpy as np 
import scipy.signal as sp 
import pylab


def F(omega,alpha):
    pol1 = np.poly1d([1, omega])
    pol2 = np.poly1d([1,(2 * omega),((omega * omega)+(alpha * alpha))])
    return pol1, pol2

fignum = 0
numerator,denominator = F(0.5,1.5)
denominator = np.polymul([1,0,2.25], denominator)
H = sp.lti(numerator, denominator)
t = np.linspace(0,50,1000)
sol = sp.impulse(H,T=t)
pylab.plot(sol[0],sol[1],'-r')
pylab.xlabel(r't',fontsize=15)
pylab.ylabel(r'x',fontsize=15)
pylab.savefig('figa.png')
fignum += 1
pylab.show()

numerator,denominator = F(0.05,1.5)
denominator = np.polymul([1,0,2.25],denominator)
H = sp.lti(numerator,denominator)
sol = sp.impulse(H,T=t)
pylab.plot(sol[0],sol[1],'-r')
pylab.xlabel(r't',fontsize=15)
pylab.ylabel(r'x',fontsize=15)
pylab.savefig('figb.png')
fignum += 1
pylab.show()

i = 0
for alpha in np.arange(1.4,1.6,0.05):
    H = sp.lti([1],[1,0,2.25])
    t = np.linspace(0,50,1000)
    f=(np.cos(alpha*t))*(np.exp(-0.05*t))
    sol= sp.lsim(H,f,t)
    i += 1
    pylab.subplot(3,2,i)
    pylab.title("omega = {}".format(alpha))
    pylab.plot(t,sol[1],'-r')
pylab.savefig('figc.png')
fignum += 1
pylab.show()

t = np.linspace(0,20,1000)
H_x = sp.lti(np.poly1d([1,0,2]),np.poly1d([1,0,3,0]))
sol_x = sp.impulse(H_x,T=t)
H_y = sp.lti(np.poly1d([2]),np.poly1d([1,0,3,0]))
sol_y = sp.impulse(H_y,T=t)
pylab.plot(sol_x[0],sol_x[1])
pylab.plot(sol_y[0],sol_y[1])
pylab.xlabel('time')
pylab.ylabel('x(t),y(t)')
pylab.legend(["x(t)", "y(t)"], loc ="lower right")
pylab.savefig('figd.png')
fignum += 1
pylab.show()


H = sp.lti(np.poly1d([1000000]),np.poly1d([0.000001,100,1000000]))
omega,S,phi=H.bode()
pylab.semilogx(omega,S)
pylab.ylabel(r'$|H(s)|$')
pylab.xlabel(r'$\omega$')
pylab.savefig('fige.png')
fignum += 1
pylab.show()
pylab.semilogx(omega,phi)
pylab.ylabel(r'$\angle(H(s))$')
pylab.xlabel(r'$\omega$')
pylab.savefig('figf.png')
fignum += 1
pylab.show()

t = np.linspace(0,30*0.000001,1000)
vi = np.multiply(np.cos(1000*t)-np.cos(1000000*t),np.heaviside(t,0.5))
sol = sp.lsim(H,vi,t)
pylab.plot(sol[0],sol[1],'-r')
pylab.xlabel(r't',fontsize=15)
pylab.ylabel(r'$v_{o}(t)$',fontsize=15)
pylab.savefig('figg.png')
fignum += 1
pylab.show()


t = np.linspace(0,10*0.001,100000)
vi = np.multiply(np.cos(1000*t)-np.cos(1000000*t),np.heaviside(t,0.5))
sol = sp.lsim(H,vi,t)
pylab.plot(sol[0],sol[1],'-r')
pylab.xlabel(r't',fontsize=15)
pylab.ylabel(r'$v_{o}(t)$',fontsize=15)
pylab.savefig('figh.png')
fignum += 1
pylab.show()